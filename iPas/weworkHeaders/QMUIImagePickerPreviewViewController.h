//
//     Generated by class-dump 3.5 (64 bit) (Debug version compiled Sep 17 2017 16:24:48).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2015 by Steve Nygard.
//

#import "QMUIImagePreviewViewController.h"

#import "QMUIImagePreviewViewDelegate-Protocol.h"

@class NSMutableArray, NSString, QMUIButton, QMUIPieProgressView, UIButton, UIColor, UIView;
@protocol QMUIImagePickerPreviewViewControllerDelegate;

@interface QMUIImagePickerPreviewViewController : QMUIImagePreviewViewController <QMUIImagePreviewViewDelegate>
{
    _Bool _singleCheckMode;
    _Bool _usePhotoKit;
    int _downloadStatus;
    UIColor *_toolBarBackgroundColor;
    UIColor *_toolBarTintColor;
    id <QMUIImagePickerPreviewViewControllerDelegate> _delegate;
    UIView *_topToolBarView;
    QMUIButton *_backButton;
    QMUIButton *_checkboxButton;
    QMUIPieProgressView *_progressView;
    UIButton *_downloadRetryButton;
    NSMutableArray *_imagesAssetArray;
    NSMutableArray *_selectedImageAssetArray;
    long long _maximumSelectImageCount;
    long long _minimumSelectImageCount;
    NSString *_alertTitleWhenExceedMaxSelectImageCount;
    NSString *_alertButtonTitleWhenExceedMaxSelectImageCount;
}

+ (id)appearance;
+ (void)initialize;
@property(copy, nonatomic) NSString *alertButtonTitleWhenExceedMaxSelectImageCount; // @synthesize alertButtonTitleWhenExceedMaxSelectImageCount=_alertButtonTitleWhenExceedMaxSelectImageCount;
@property(copy, nonatomic) NSString *alertTitleWhenExceedMaxSelectImageCount; // @synthesize alertTitleWhenExceedMaxSelectImageCount=_alertTitleWhenExceedMaxSelectImageCount;
@property(nonatomic) long long minimumSelectImageCount; // @synthesize minimumSelectImageCount=_minimumSelectImageCount;
@property(nonatomic) long long maximumSelectImageCount; // @synthesize maximumSelectImageCount=_maximumSelectImageCount;
@property(nonatomic) int downloadStatus; // @synthesize downloadStatus=_downloadStatus;
@property(retain, nonatomic) NSMutableArray *selectedImageAssetArray; // @synthesize selectedImageAssetArray=_selectedImageAssetArray;
@property(retain, nonatomic) NSMutableArray *imagesAssetArray; // @synthesize imagesAssetArray=_imagesAssetArray;
@property(readonly, nonatomic) UIButton *downloadRetryButton; // @synthesize downloadRetryButton=_downloadRetryButton;
@property(readonly, nonatomic) QMUIPieProgressView *progressView; // @synthesize progressView=_progressView;
@property(readonly, nonatomic) QMUIButton *checkboxButton; // @synthesize checkboxButton=_checkboxButton;
@property(readonly, nonatomic) QMUIButton *backButton; // @synthesize backButton=_backButton;
@property(readonly, nonatomic) UIView *topToolBarView; // @synthesize topToolBarView=_topToolBarView;
@property(nonatomic) __weak id <QMUIImagePickerPreviewViewControllerDelegate> delegate; // @synthesize delegate=_delegate;
@property(retain, nonatomic) UIColor *toolBarTintColor; // @synthesize toolBarTintColor=_toolBarTintColor;
@property(retain, nonatomic) UIColor *toolBarBackgroundColor; // @synthesize toolBarBackgroundColor=_toolBarBackgroundColor;
- (void).cxx_destruct;
- (void)requestImageForZoomImageView:(id)arg1 withIndex:(long long)arg2;
- (void)handleDownloadRetryButtonClick:(id)arg1;
- (void)handleCheckButtonClick:(id)arg1;
- (void)handleCancelPreviewImage:(id)arg1;
- (void)singleTouchInZoomingImageView:(id)arg1 location:(struct CGPoint)arg2;
- (void)imagePreviewView:(id)arg1 willScrollHalfToIndex:(unsigned long long)arg2;
- (void)imagePreviewView:(id)arg1 renderZoomImageView:(id)arg2 atIndex:(unsigned long long)arg3;
- (unsigned long long)numberOfImagesInImagePreviewView:(id)arg1;
- (void)updateImagePickerPreviewViewWithImagesAssetArray:(id)arg1 selectedImageAssetArray:(id)arg2 currentImageIndex:(long long)arg3 singleCheckMode:(_Bool)arg4;
- (void)viewDidLayoutSubviews;
- (void)viewWillDisappear:(_Bool)arg1;
- (void)viewWillAppear:(_Bool)arg1;
- (void)initSubviews;
- (id)initWithNibName:(id)arg1 bundle:(id)arg2;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

